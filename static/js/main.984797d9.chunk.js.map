{"version":3,"sources":["components/PasswordGenerator/PasswordGenerator.module.scss","assets/icons/logo.png","components/PasswordGenerator/useCopyToClipboard.js","components/PasswordGenerator/usePasswordGenerator.js","components/PasswordGenerator/PasswordGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useCopyToClipboard","text","useEffect","a","navigator","clipboard","writeText","console","log","error","copy","useGeneratePassword","settings","lowercase","password","usedLength","charCount","Math","floor","passwordLength","useSymbols","useNumbers","useLowercase","useUppercase","Array","map","i","charAt","random","length","join","passarray","from","j","k","PasswordGenerator","useState","setPassword","isVisible","generatePassword","className","styles","PasswordGeneratorContainer","Logo","src","alt","Display","Controls","CopyControl","Copy","onClick","GenerateControl","Generate","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.984797d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PasswordGeneratorContainer\":\"PasswordGenerator_PasswordGeneratorContainer__3TxSc\",\"PasswordGenerator\":\"PasswordGenerator_PasswordGenerator__2_g4s\",\"grow\":\"PasswordGenerator_grow__29PVc\",\"Logo\":\"PasswordGenerator_Logo__Lkyqg\",\"Display\":\"PasswordGenerator_Display__CXpDU\",\"appear\":\"PasswordGenerator_appear__2_Xz5\",\"Controls\":\"PasswordGenerator_Controls__ZYGjA\",\"CopyControl\":\"PasswordGenerator_CopyControl__3mGiM\",\"Copy\":\"PasswordGenerator_Copy__4GVxo\",\"GenerateControl\":\"PasswordGenerator_GenerateControl__3buzI\",\"Generate\":\"PasswordGenerator_Generate__3Q5Y6\",\"bounce\":\"PasswordGenerator_bounce__3SlDb\"};","module.exports = __webpack_public_path__ + \"static/media/logo.cddb6a0c.png\";","import { useEffect } from \"react\";\n\nconst useCopyToClipboard = (text) => {\n  useEffect(() => {\n    const copy = async () => {\n      try {\n        await navigator.clipboard.writeText(text);\n        console.log(\"Password copied to clipboard\");\n      } catch (err) {\n        console.error(\"Failed to copy: \", err);\n      }\n    };\n    copy();\n  });\n};\n\nexport default useCopyToClipboard;\n","const useGeneratePassword = (settings) => {\n  // Charachter Library\n  const symbols = \"!@#$%^&*\";\n  const numbers = \"0123456789\";\n  const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n  const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  let password = \"\";\n  let usedLength = 0;\n  let charCount = Math.floor(\n    settings.passwordLength /\n      (settings.useSymbols +\n        settings.useNumbers +\n        settings.useLowercase +\n        settings.useUppercase)\n  );\n\n  // Generating Random chars\n  if (settings.useSymbols === true) {\n    password += [...Array(charCount)]\n      .map((i) => symbols.charAt(Math.floor(Math.random() * symbols.length)))\n      .join(\"\");\n    usedLength = usedLength + charCount;\n  }\n  if (settings.useNumbers === true) {\n    password += [...Array(charCount)]\n      .map((i) => numbers.charAt(Math.floor(Math.random() * numbers.length)))\n      .join(\"\");\n    usedLength = usedLength + charCount;\n  }\n  if (settings.useLowercase === true) {\n    password += [...Array(charCount)]\n      .map((i) =>\n        lowercase.charAt(Math.floor(Math.random() * lowercase.length))\n      )\n      .join(\"\");\n    usedLength = usedLength + charCount;\n  }\n  if (settings.useUppercase === true) {\n    password += [...Array(charCount)]\n      .map((i) =>\n        uppercase.charAt(Math.floor(Math.random() * uppercase.length))\n      )\n      .join(\"\");\n    usedLength = usedLength + charCount;\n  }\n\n  if (settings.passwordLength - usedLength > 0) {\n    password += [...Array(settings.passwordLength - usedLength)]\n      .map((i) =>\n        lowercase.charAt(Math.floor(Math.random() * lowercase.length))\n      )\n      .join(\"\");\n  }\n\n  let passarray = Array.from(password);\n\n  for (let i = passarray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const k = passarray[i];\n    passarray[i] = passarray[j];\n    passarray[j] = k;\n  }\n\n  return passarray.join(\"\");\n};\n\nexport default useGeneratePassword;\n","import React, { useState } from \"react\";\n\n// Custom Hook\nimport useCopyToClipboard from \"./useCopyToClipboard\";\nimport useGeneratePassword from \"./usePasswordGenerator\";\n\n// Styles and Assets\nimport Logo from \"../../assets/icons/logo.png\";\nimport styles from \"./PasswordGenerator.module.scss\";\n\nconst PasswordGenerator = () => {\n  // React Hooks\n  const [password, setPassword] = useState(\"password\");\n  const [settings] = useState({\n    isVisible: true,\n    useNumbers: true,\n    useSymbols: true,\n    useUppercase: true,\n    useLowercase: true,\n    passwordLength: 14,\n  });\n  // Custom Hooks\n  const generatePassword = useGeneratePassword(settings);\n\n  // onClick Handlers\n  const handleGenerate = () => {\n    setPassword(generatePassword);\n  };\n\n  // JSX\n  return (\n    <div className={styles.PasswordGeneratorContainer}>\n      <div className={styles.PasswordGenerator}>\n        <div className={styles.Logo}>\n          <img src={Logo} alt=\"Logo\" />\n        </div>\n        <div className={styles.Display}>\n          <p>{password}</p>\n        </div>\n        <div className={styles.Controls}>\n          <div className={styles.CopyControl}>\n            <div className={styles.Copy} onClick={useCopyToClipboard(password)}>\n              <p>copy</p>\n            </div>\n          </div>\n          <div className={styles.GenerateControl}>\n            <div className={styles.Generate} onClick={handleGenerate}>\n              <p>generate</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordGenerator;\n","import React from \"react\";\nimport PasswordGenerator from \"./components/PasswordGenerator/PasswordGenerator\";\n\nfunction App() {\n  return <PasswordGenerator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}